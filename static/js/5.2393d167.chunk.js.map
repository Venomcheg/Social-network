{"version":3,"sources":["hoc/FormsInstance.js","utils/validators/validators.js","components/main/dialogs/dialogs-list/dialogs-item/dialogs-item.module.scss","components/main/dialogs/dialogs.module.scss","components/main/dialogs/dialogs-list/dialogs-item/index.js","components/main/dialogs/dialogs-list/dialogs-item/dialogs-item.js","components/main/dialogs/dialogs-list/dialogs-list.js","components/main/dialogs/dialogs-list/index.js","components/main/dialogs/dialogs-list/dialogs-list-container.js","components/main/dialogs/dialogs-messages/index.js","components/main/dialogs/dialogs-messages/dialogs-messages.js","components/main/dialogs/dialogs-messages-new/dialogs-messages-new.js","components/main/dialogs/dialogs-messages-new/index.js","components/main/dialogs/dialogs-messages-new/dialogs-messages-new-container.js","components/main/dialogs/dialogs.js","hoc/withAuthRedirect.js","components/main/dialogs/dialogs-container.js","components/main/dialogs/index.js"],"names":["Textarea","styled","textarea","meta","error","touched","Error","p","Element","input","props","as","CreateField","name","validators","component","placeholder","type","validate","required","value","maxLengthCreator","maxLength","length","module","exports","DialogsItem","className","DialogsStyle","text","to","id","DialogsList","state","dialogs","map","item","connect","dialogsReducer","dispatch","DialogsMessages","message","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","DialogsMessagesNew","values","newText","newMessageBody","DialogsMessagesNewContainer","newMessageText","addMessageActionCreator","Dialogs","isAuth","DialogsStyles","wrapper","messages","mapStateToPropsForAuthRedirect","authReducer","compose","Component","RedirectComponent","this","React","DialogsContainer"],"mappings":"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","file":"static/js/5.2393d167.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { Field } from \"redux-form\"\r\nimport styled from \"styled-components\"\r\n\r\nconst Textarea = styled.textarea`\r\n  border: ${(meta) => (meta.error && meta.touched ? \"red\" : \"black\")} 2px solid;\r\n  outline: none;\r\n`\r\n\r\nconst Error = styled.p`\r\n  display: ${(meta) => (meta.error && meta.touched ? \"block\" : \"none\")};\r\n  color: red;\r\n`\r\nlet Element = (Element) => ({ input, meta, ...props }) => {\r\n  return (\r\n    <>\r\n      <Textarea as={Element} {...input} {...props} {...meta}></Textarea>\r\n      <Error {...meta}>{meta.error}</Error>\r\n    </>\r\n  )\r\n}\r\n\r\nexport const CreateField = (\r\n  name,\r\n  validators,\r\n  component,\r\n  placeholder = \"\",\r\n  type = \"text\"\r\n) => (\r\n  <Field\r\n    type={type}\r\n    placeholder={placeholder}\r\n    name={name}\r\n    validate={validators}\r\n    component={Element(component)}\r\n  />\r\n)\r\n","export const required = (value) => {\r\n  if (value) return undefined\r\n\r\n  return \"Field is required\"\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n  if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n  return undefined\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"dialogs-item_text__2V3P1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"dialogs_wrapper__1Bivt\"};","import DialogsItem from \"./dialogs-item\"\r\n\r\nexport default DialogsItem\r\n","import React from \"react\"\r\nimport { NavLink } from \"react-router-dom\"\r\n\r\nimport DialogsStyle from \"./dialogs-item.module.scss\"\r\nconst DialogsItem = (props) => {\r\n  return (\r\n    <li className={DialogsStyle.text}>\r\n      <NavLink to={`/dialog/${props.id}`}>{props.name}</NavLink>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default DialogsItem\r\n","import React from \"react\"\r\nimport { NavLink } from \"react-router-dom\"\r\n\r\nimport DialogsItem from \"./dialogs-item\"\r\n\r\nconst DialogsList = (state) => {\r\n  return (\r\n    <ul>\r\n      {state.dialogs.map((item) => {\r\n        return <DialogsItem name={item.name} key={item.id} />\r\n      })}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default DialogsList\r\n","import DialogsList from \"./dialogs-list-container\"\r\n\r\nexport default DialogsList\r\n","import React from \"react\"\r\n\r\nimport DialogsList from \"./dialogs-list\"\r\nimport { connect } from \"react-redux\"\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    dialogs: state.dialogsReducer.dialogs,\r\n  }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {}\r\n}\r\nconst DialogsListContainer = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(DialogsList)\r\nexport default DialogsListContainer\r\n","import DialogsMessages from \"./dialogs-messages\"\r\n\r\nexport default DialogsMessages\r\n","import React from \"react\"\r\n\r\nconst DialogsMessages = ({ message }) => {\r\n  return <p>{message}</p>\r\n}\r\n\r\nexport default DialogsMessages\r\n","import React from \"react\"\r\nimport { Field, reduxForm } from \"redux-form\"\r\nimport { CreateField } from \"../../../../hoc/FormsInstance\"\r\nimport { required } from \"../../../../utils/validators/validators\"\r\n\r\nconst DialogsMessagesNew = (props) => {\r\n  const addNewMessage = (values) => {\r\n    props.newText(values.newMessageBody)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Messages</h1>\r\n      <AddMessageFormRedux onSubmit={addNewMessage} />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst AddMessageForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        {CreateField(\r\n          \"newMessageBody\",\r\n          [required],\r\n          \"textarea\",\r\n          \"Enter your message\",\r\n          null\r\n        )}\r\n      </div>\r\n      <div>\r\n        <button>Send</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({ form: \"dialogAddMessageForm\" })(\r\n  AddMessageForm\r\n)\r\n\r\nexport default DialogsMessagesNew\r\n","import DialogsMessagesNewContainer from \"./dialogs-messages-new-container\"\r\n\r\nexport default DialogsMessagesNewContainer\r\n","import React from \"react\"\r\nimport { addMessageActionCreator } from \"../../../../redux/dialogs-reducer\"\r\nimport DialogsMessagesNew from \"./dialogs-messages-new\"\r\nimport { connect } from \"react-redux\"\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    newMessageText: state.dialogsReducer.newMessageText,\r\n  }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    newText: (newMessageBody) => {\r\n      dispatch(addMessageActionCreator(newMessageBody))\r\n    },\r\n  }\r\n}\r\nconst DialogsMessagesNewContainer = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(DialogsMessagesNew)\r\nexport default DialogsMessagesNewContainer\r\n","import React from \"react\"\r\nimport { Redirect } from \"react-router-dom\"\r\n\r\nimport DialogsList from \"./dialogs-list\"\r\nimport DialogsMessages from \"./dialogs-messages\"\r\nimport DialogsMessagesNew from \"./dialogs-messages-new\"\r\nimport DialogsStyles from \"./dialogs.module.scss\"\r\n\r\nconst Dialogs = (state) => {\r\n  return !state.isAuth ? (\r\n    <Redirect to={`login`} />\r\n  ) : (\r\n    <div>\r\n      <h2>Contacts</h2>\r\n      <div className={DialogsStyles.wrapper}>\r\n        <DialogsList />\r\n        <div>\r\n          {state.messages.map((item) => (\r\n            <DialogsMessages message={item.message} key={item.id} />\r\n          ))}\r\n          <DialogsMessagesNew />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dialogs\r\n","import { Redirect } from \"react-router-dom\"\r\nimport React from \"react\"\r\nimport { connect } from \"react-redux\"\r\nlet mapStateToPropsForAuthRedirect = (state) => ({\r\n  isAuth: state.authReducer.isAuth,\r\n})\r\nexport const withAuthRedirect = (Component) => {\r\n  class RedirectComponent extends React.Component {\r\n    render() {\r\n      if (!this.props.isAuth) return <Redirect to=\"login\" />\r\n      return <Component {...this.props} />\r\n    }\r\n  }\r\n\r\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForAuthRedirect)(\r\n    RedirectComponent\r\n  )\r\n\r\n  return ConnectedAuthRedirectComponent\r\n}\r\n","import React from \"react\"\r\n\r\nimport { connect } from \"react-redux\"\r\nimport Dialogs from \"./dialogs\"\r\nimport { withAuthRedirect } from \"../../../hoc/withAuthRedirect\"\r\nimport { compose } from \"redux\"\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    messages: state.dialogsReducer.messages,\r\n  }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {}\r\n}\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)(Dialogs)\r\n","import DialogsContainer from \"./dialogs-container\"\r\n\r\nexport default DialogsContainer\r\n"],"sourceRoot":""}