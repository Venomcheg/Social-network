{"version":3,"sources":["hoc/FormsInstance.js","utils/validators/validators.js","components/main/login/login.js"],"names":["Textarea","styled","textarea","meta","error","touched","Error","p","Element","input","props","as","CreateField","name","validators","component","placeholder","type","validate","required","value","maxLengthCreator","maxLength","length","div","LoginReduxForm","reduxForm","form","handleSubmit","console","log","onSubmit","connect","state","isAuth","authReducer","login","to","formData","email","password","rememberMe"],"mappings":"4aAIA,IAAMA,EAAWC,IAAOC,SAAV,KACF,SAACC,GAAD,OAAWA,EAAKC,OAASD,EAAKE,QAAU,MAAQ,WAItDC,EAAQL,IAAOM,EAAV,KACE,SAACJ,GAAD,OAAWA,EAAKC,OAASD,EAAKE,QAAU,QAAU,UAG3DG,EAAU,SAACA,GAAD,OAAa,YAAgC,IAA7BC,EAA4B,EAA5BA,MAAON,EAAqB,EAArBA,KAASO,EAAY,gCACxD,OACE,qCACE,cAACV,EAAD,qCAAUW,GAAIH,GAAaC,GAAWC,GAAWP,IACjD,cAACG,EAAD,2BAAWH,GAAX,aAAkBA,EAAKC,cAKhBQ,EAAc,SACzBC,EACAC,EACAC,GAHyB,IAIzBC,EAJyB,uDAIX,GACdC,EALyB,uDAKlB,OALkB,OAOzB,cAAC,IAAD,CACEA,KAAMA,EACND,YAAaA,EACbH,KAAMA,EACNK,SAAUJ,EACVC,UAAWP,EAAQO,O,iCClCvB,oEAAO,IAAMI,EAAW,SAACC,GACvB,IAAIA,EAEJ,MAAO,qBAGIC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAC9C,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,2OCChC,IAAMhB,EAAQL,IAAOuB,IAAV,KAEP,qBAAGpB,OAAiB,qBA0BlBqB,EAAiBC,YAAU,CAC/BC,KAAM,SADeD,EAtBL,SAAC,GAA6B,IAA3BtB,EAA0B,EAA1BA,MAAOwB,EAAmB,EAAnBA,aAE1B,OADAC,QAAQC,IAAI1B,GAEV,uBAAM2B,SAAUH,EAAhB,UACE,8BAAMhB,YAAY,QAAS,CAACO,KAAW,QAAS,QAAS,WACzD,8BACGP,YAAY,WAAY,CAACO,KAAW,QAAS,WAAY,cAE5D,8BACE,kCACGP,YAAY,aAAc,CAACO,KAAW,QAAS,KAAM,YADxD,mBAKF,cAACb,EAAD,CAAOF,MAAOA,EAAd,SAAsBA,IACtB,8BACE,oDA4BO4B,uBAHS,SAACC,GAAD,MAAY,CAClCC,OAAQD,EAAME,YAAYD,UAEY,CAAEE,WAA3BJ,EAlBD,SAACtB,GAKb,OAAIA,EAAMwB,OACD,cAAC,IAAD,CAAUG,GAAI,YAGrB,gCACE,uCACA,cAACZ,EAAD,CAAgBM,SAVH,SAACO,GAAc,IACxBC,EAAgCD,EAAhCC,MAAOC,EAAyBF,EAAzBE,SAAUC,EAAeH,EAAfG,WACvB/B,EAAM0B,MAAMG,EAAOC,EAAUC","file":"static/js/6.522535bf.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { Field } from \"redux-form\"\r\nimport styled from \"styled-components\"\r\n\r\nconst Textarea = styled.textarea`\r\n  border: ${(meta) => (meta.error && meta.touched ? \"red\" : \"black\")} 2px solid;\r\n  outline: none;\r\n`\r\n\r\nconst Error = styled.p`\r\n  display: ${(meta) => (meta.error && meta.touched ? \"block\" : \"none\")};\r\n  color: red;\r\n`\r\nlet Element = (Element) => ({ input, meta, ...props }) => {\r\n  return (\r\n    <>\r\n      <Textarea as={Element} {...input} {...props} {...meta}></Textarea>\r\n      <Error {...meta}>{meta.error}</Error>\r\n    </>\r\n  )\r\n}\r\n\r\nexport const CreateField = (\r\n  name,\r\n  validators,\r\n  component,\r\n  placeholder = \"\",\r\n  type = \"text\"\r\n) => (\r\n  <Field\r\n    type={type}\r\n    placeholder={placeholder}\r\n    name={name}\r\n    validate={validators}\r\n    component={Element(component)}\r\n  />\r\n)\r\n","export const required = (value) => {\r\n  if (value) return undefined\r\n\r\n  return \"Field is required\"\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n  if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n  return undefined\r\n}\r\n","import React from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { reduxForm, Field } from \"redux-form\"\r\nimport { required } from \"../../../utils/validators/validators\"\r\nimport { login } from \"../../../redux/auth-reducer\"\r\nimport { Redirect } from \"react-router-dom\"\r\nimport styled from \"styled-components\"\r\nimport { CreateField } from \"../../../hoc/FormsInstance\"\r\nconst Error = styled.div`\r\n  display: none;\r\n  ${({ error }) => error && `display: block;`}\r\n  color: red;\r\n`\r\n\r\nconst LoginForm = ({ error, handleSubmit }) => {\r\n  console.log(error)\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div>{CreateField(\"email\", [required], \"input\", \"email\", \"input\")}</div>\r\n      <div>\r\n        {CreateField(\"password\", [required], \"input\", \"password\", \"password\")}\r\n      </div>\r\n      <div>\r\n        <label>\r\n          {CreateField(\"rememberMe\", [required], \"input\", null, \"checkbox\")}\r\n          remember me\r\n        </label>\r\n      </div>\r\n      <Error error={error}>{error}</Error>\r\n      <div>\r\n        <button>submit</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({\r\n  form: \"login\",\r\n})(LoginForm)\r\n\r\nconst Login = (props) => {\r\n  const onSubmit = (formData) => {\r\n    let { email, password, rememberMe } = formData\r\n    props.login(email, password, rememberMe)\r\n  }\r\n  if (props.isAuth) {\r\n    return <Redirect to={\"profile\"} />\r\n  }\r\n  return (\r\n    <div>\r\n      <h1>Login</h1>\r\n      <LoginReduxForm onSubmit={onSubmit} />\r\n    </div>\r\n  )\r\n}\r\nconst mapStateToProps = (state) => ({\r\n  isAuth: state.authReducer.isAuth,\r\n})\r\nexport default connect(mapStateToProps, { login })(Login)\r\n"],"sourceRoot":""}